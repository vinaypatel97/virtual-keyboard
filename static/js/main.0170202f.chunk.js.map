{"version":3,"sources":["utils/constant.js","components/RenderKeyboard.js","utils/helper.js","pages/VirtualKeyboard/index.js","App.js","index.js"],"names":["NUMS","ALPHA","SUB_KEYS","DELETE","CAPS_LOCK","ENTER","SPACE","SHIFT","TAB","RenderKeyboard","useState","inputVal","setInputVal","alphabet","setAlphabet","caps","setCaps","shiftKeyFlag","setShiftKeyFlag","clickHandler","e","target","tagName","document","getElementById","focus","keyText","innerText","substring","length","val","includes","toLowerCase","arr","array","randomIndex","currentIndex","Math","floor","random","shuffle","shiftFlag","nextChar","toUpperCase","split","useEffect","keyboard","addEventListener","removeEventListener","console","log","RenderElement","value","type","className","defaultValue","id","disabled","map","key","index","insertLineBreak","indexOf","renderKeys","VirtualKeyboard","Header","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0170202f.chunk.js","sourcesContent":["const NUMS = [\n    \"` ~\", \"1 !\", \"2 @\", \"3 #\",\n    \"4 $\", \"5 %\", \"6 ^\", \"7 &\",\n    \"8 *\", \"9 (\", \"0 )\", \"_ -\", \"= +\"\n];\n\nconst ALPHA = [\n    \"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\",\n    \"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\",\n    \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\"\n];\n\nconst SUB_KEYS = [\n    \"[ {\", \"] }\", \"\\\\ |\", \"; :\", \"\\' \\\"\", \", <\", \". >\", \"/ ?\"\n]\n\nconst DELETE = 'delete';\nconst CAPS_LOCK = 'caps lock';\nconst ENTER = 'enter';\nconst SPACE = 'space';\nconst SHIFT = 'shift';\nconst TAB = 'tab';\n\n\nexport {\n    NUMS,\n    ALPHA,\n    DELETE,\n    CAPS_LOCK,\n    ENTER,\n    SPACE,\n    SHIFT,\n    TAB,\n    SUB_KEYS\n}","import React, { useState, useEffect } from 'react';\nimport { shuffle } from '../utils/helper';\nimport {\n    NUMS,\n    ALPHA,\n    DELETE,\n    CAPS_LOCK,\n    ENTER,\n    SPACE,\n    SHIFT,\n    TAB,\n    SUB_KEYS\n} from '../utils/constant';\n\nconst RenderKeyboard = () => {\n\n    const [inputVal, setInputVal] = useState(\"\");\n    const [alphabet, setAlphabet] = useState(ALPHA);\n    const [caps, setCaps] = useState(false);\n    const [shiftKeyFlag, setShiftKeyFlag] = useState(false);\n\n    const clickHandler = (e) => {\n        if (e.target.tagName === 'BUTTON') {\n            document.getElementById('input').focus();\n            const keyText = e.target.innerText;\n\n            switch (keyText) {\n                case DELETE:\n                    setInputVal(inputVal => inputVal.substring(0, inputVal.length - 1));\n                    break;\n                case CAPS_LOCK:\n                    setCaps(val => !val);\n                    break;\n                case ENTER:\n                    setInputVal(inputVal => inputVal + \"\\n\");\n                    break;\n                case SPACE:\n                    setInputVal(inputVal => inputVal + \" \");\n                    break;\n                case SHIFT:\n                    setShiftKeyFlag(val => !val);\n                    break;\n                case TAB:\n                    setInputVal(inputVal => inputVal + \"    \");\n                    break;\n                default:\n                    if (ALPHA.includes(keyText.toLowerCase())) setAlphabet(arr => shuffle(arr));\n                    let nextChar = keyText;\n                    let shiftFlag;\n                    setShiftKeyFlag(val => {\n                        shiftFlag = val;\n                        if (val) return !val;\n                        return val;\n                    });\n                    if (shiftFlag) {\n                        if (ALPHA.includes(keyText.toLowerCase())) {\n                            nextChar = nextChar.toUpperCase();\n                        } else {\n                            nextChar = nextChar.split(\" \")[1];\n                        }\n                    }\n                    if (!shiftFlag) {\n                        nextChar = nextChar.split(\" \")[0];\n                    }\n                    setInputVal(inputVal => `${inputVal}${nextChar}`);\n                    break;\n            }\n        }\n    }\n\n    useEffect(() => {\n        const keyboard = document.getElementById('keyboardKeys');\n        // attach click event on keyboard container\n        keyboard.addEventListener('click', clickHandler);\n        return () => {\n            // remove event listner on unmount\n            keyboard.removeEventListener('click', () => {\n                console.log('events removed ');\n            });\n        }\n    }, []);\n\n    const RenderElement = ({ value }) => {\n        switch (value) {\n            case DELETE:\n                return (\n                    <button type=\"button\" className=\"keyboardKey keyboardKey--wide\">{value}</button>\n                )\n            case CAPS_LOCK:\n                return (\n                    <button type=\"button\" className={`keyboardKey keyboardKey--wide ${caps ? \"active\" : \"\"}`}>{value}</button>\n                )\n            case SHIFT:\n                return (\n                    <button type=\"button\" className={`keyboardKey keyboardKey--wide ${shiftKeyFlag ? \"active\" : \"\"}`}>{value}</button>\n                )\n            case ENTER:\n                return (\n                    <button type=\"button\" className=\"keyboardKey keyboardKey--wide\">{value}</button>\n                )\n            case SPACE:\n                return (\n                    <button type=\"button\" className=\"keyboardKey keyboardKey--extra-wide\">{value}</button>\n                )\n            case TAB:\n                return (\n                    <button type=\"button\" className=\"keyboardKey keyboardKey--wide\">{value}</button>\n                )\n            default:\n                return (\n                    <button type=\"button\" className=\"keyboardKey\">{caps ? value.toUpperCase() : value}</button>\n                )\n        }\n    }\n\n    function renderKeys(alphabet) {\n        const keyLayout = [...NUMS, DELETE, TAB, ...alphabet, ...SUB_KEYS, SHIFT, CAPS_LOCK, SPACE, ENTER]\n        return (\n            keyLayout.map((key, index) => {\n                // insertLineBreak - line break after these below mentined keys\n                const insertLineBreak = [DELETE, alphabet[9], alphabet[18], alphabet[25], SHIFT, ENTER].indexOf(key) !== -1;\n                return (\n                    <span key={`${key}_${index}`}>\n                        <RenderElement value={key} />\n                        { insertLineBreak && <br />}\n                    </span>\n                )\n            })\n        )\n    }\n\n    return (\n        <div>\n            <div className=\"dFlex\">\n                <textarea defaultValue={inputVal} className=\"inputBox\" id=\"input\" disabled />\n            </div>\n            <div className=\"keyboard\">\n                <div className=\"keyboardKeys\" id=\"keyboardKeys\">\n                    {renderKeys(alphabet)}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RenderKeyboard;","export const shuffle = (array) => {\n    let currentIndex = array.length, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex--;\n\n        // And swap it with the current element.\n        [array[currentIndex], array[randomIndex]] = [\n            array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n}\n","import React from 'react';\nimport RenderKeyBoard from '../../components/RenderKeyboard';\n\nconst VirtualKeyboard = () => {\n    const Header = () => {\n        return (\n            <div className=\"dFlex header\">\n                <h1>Virtual Keyboard</h1>\n            </div>\n        )\n    }\n\n    return (\n        <>\n            <Header />\n            <RenderKeyBoard />\n        </>\n    )\n}\n\nexport default VirtualKeyboard;\n","import './App.css';\nimport VirtualKeyboard from './pages/VirtualKeyboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <VirtualKeyboard />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}